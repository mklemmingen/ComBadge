# Fleet Management Data Validation Rules
# UPDATE INSTRUCTIONS: Customize validation rules for your specific data requirements and business logic
# 1. Update data format patterns to match your organization's standards and conventions
# 2. Modify field validation rules based on your database schema and business requirements  
# 3. Add cross-field validation logic specific to your business processes and workflows
# 4. Include domain-specific validation rules for your industry and regulatory requirements
# 5. Update error handling and user feedback messages to match your communication style
# 6. Add performance-optimized validation rules for high-volume operations

version: "1.0"
last_updated: "2024-01-15"
organization: "Your Organization Name"  # UPDATE: Replace with your organization
scope: "Data validation rules for all fleet management operations"

# ENTITY VALIDATION RULES
entity_validation:
  description: "Field-level validation rules for core entities"
  
  vehicle_validation:
    vehicle_id:
      # UPDATE: Modify pattern to match your vehicle ID format
      pattern: "^[A-Z]{3}[0-9]{3,4}$"  # Example: VEH001, VEH0001
      examples: ["VEH001", "VEH0123", "CAR042"]
      min_length: 6
      max_length: 7
      required: true
      case_sensitive: false
      error_message: "Vehicle ID must be 3 letters followed by 3-4 numbers (e.g., VEH001)"
      
      alternative_formats:
        # UPDATE: Add alternative ID formats used in your organization
        - pattern: "^[A-Z]{2}-[0-9]{4}$"    # Example: FL-0001
          description: "Fleet hyphenated format"
        - pattern: "^[0-9]{6}$"             # Example: 123456
          description: "Six-digit numeric format"
        - pattern: "^AST[0-9]{5}$"          # Example: AST12345
          description: "Asset number format"
    
    vin:
      pattern: "^[A-HJ-NPR-Z0-9]{17}$"  # Standard VIN format
      length: 17
      required: false  # Not always required for internal operations
      validation_method: "checksum"  # Perform VIN checksum validation
      error_message: "VIN must be exactly 17 characters, excluding I, O, Q"
      
      checksum_validation:
        enabled: true
        algorithm: "ISO 3779 standard"
        position_9_check: true  # Validate check digit at position 9
        manufacturer_validation: true  # Validate WMI codes
    
    license_plate:
      # UPDATE: Customize patterns for your region/country
      patterns:
        - pattern: "^[A-Z0-9-]{2,8}$"      # General format
          regions: ["US_GENERAL"]
        - pattern: "^[A-Z]{3}-[0-9]{4}$"   # ABC-1234 format  
          regions: ["STATE_SPECIFIC_1"]
        - pattern: "^[0-9]{3}-[A-Z]{3}$"   # 123-ABC format
          regions: ["STATE_SPECIFIC_2"]
      
      min_length: 2
      max_length: 10
      required: true
      case_insensitive: true
      special_characters: ["-", " "]  # Allowed special characters
      error_message: "License plate must be 2-8 characters with letters, numbers, and hyphens"
    
    make_model:
      make:
        # UPDATE: Add/remove makes based on your fleet composition
        allowed_values: 
          - "Toyota"
          - "Honda" 
          - "Ford"
          - "Chevrolet"
          - "Nissan"
          - "Hyundai"
          - "BMW"
          - "Mercedes"
          - "Audi"
          - "Volkswagen"
        case_insensitive: true
        required: true
        error_message: "Vehicle make must be from approved manufacturer list"
      
      model:
        min_length: 2
        max_length: 30
        pattern: "^[A-Za-z0-9\\s-]+$"  # Alphanumeric with spaces and hyphens
        required: true
        error_message: "Vehicle model must be 2-30 characters, letters, numbers, spaces, and hyphens only"
      
      year:
        min_value: 2000  # UPDATE: Adjust based on your fleet age policy
        max_value: 2025  # Current year + 1 for next model year
        data_type: "integer"
        required: true
        error_message: "Vehicle year must be between 2000 and 2025"
    
    mileage:
      min_value: 0
      max_value: 999999  # Reasonable maximum mileage
      data_type: "integer"
      required: false
      increment_validation: true  # Mileage should not decrease
      error_message: "Mileage must be a positive integer less than 999,999"
      
      business_rules:
        - rule: "New mileage must be greater than or equal to previous reading"
          validation_type: "cross_temporal"
        - rule: "Daily mileage increase should not exceed 1000 miles"
          validation_type: "reasonable_change"
        - rule: "Annual mileage should not exceed 50,000 miles for standard vehicles"
          validation_type: "annual_limit"
  
  user_validation:
    user_id:
      # UPDATE: Modify based on your user ID format (email, employee ID, etc.)
      formats:
        - type: "email"
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          description: "Email address format"
        - type: "employee_id"
          pattern: "^EMP[0-9]{5}$"
          description: "Employee ID format (EMP12345)"
        - type: "username"
          pattern: "^[a-zA-Z0-9._-]{3,20}$"
          description: "Username format (3-20 characters)"
      
      required: true
      case_insensitive: true
      error_message: "User ID must be valid email, employee ID, or username format"
    
    driver_license:
      pattern: "^[A-Z0-9]{8,15}$"  # UPDATE: Match your region's license format
      min_length: 8
      max_length: 15
      required_for_roles: ["driver", "fleet_operator"]
      expiration_validation: true
      error_message: "Driver license must be 8-15 characters, letters and numbers only"
      
      expiration_rules:
        advance_warning_days: 30  # Warn 30 days before expiration
        grace_period_days: 7      # Allow 7 days after expiration
        renewal_required: true    # Block access if expired beyond grace period
    
    phone_number:
      # UPDATE: Customize for your region's phone number formats
      patterns:
        - pattern: "^\\+?1?[2-9][0-9]{2}[2-9][0-9]{2}[0-9]{4}$"  # US format
          description: "US phone number"
        - pattern: "^\\([0-9]{3}\\)\\s[0-9]{3}-[0-9]{4}$"        # (123) 456-7890
          description: "Formatted US phone number"
        - pattern: "^[0-9]{3}-[0-9]{3}-[0-9]{4}$"                # 123-456-7890
          description: "Hyphenated US phone number"
      
      required: false
      normalization: "remove_formatting"  # Store as digits only
      error_message: "Phone number must be valid 10-digit US format"

  location_validation:
    facility_name:
      # UPDATE: Replace with your actual facility names
      allowed_values:
        - "Headquarters"
        - "Main Office"
        - "Downtown Branch"
        - "Service Center"
        - "North Campus"
        - "South Building"
        - "Warehouse"
      case_insensitive: true
      required: true
      error_message: "Location must be a recognized facility name"
    
    parking_space:
      # UPDATE: Match your parking space numbering system
      patterns:
        - pattern: "^[A-Z][0-9]{1,3}$"           # A1, A123
          description: "Zone + number format"
        - pattern: "^[A-Z]{2}-[0-9]{2,3}$"       # AB-12, AB-123
          description: "Zone code + number format"
        - pattern: "^[0-9]{1,4}$"                # 1, 1234
          description: "Numeric format"
      
      min_length: 1
      max_length: 6
      required: false
      error_message: "Parking space must match facility numbering system"
    
    address:
      components:
        street_address:
          pattern: "^[0-9]+\\s+[A-Za-z0-9\\s.,'-]+$"
          max_length: 100
          required: true
        city:
          pattern: "^[A-Za-z\\s.,'-]+$"
          max_length: 50
          required: true
        state:
          pattern: "^[A-Z]{2}$"  # UPDATE: Modify for international addresses
          length: 2
          required: true
        zip_code:
          pattern: "^[0-9]{5}(-[0-9]{4})?$"  # US ZIP or ZIP+4
          required: true
      
      validation_service: "address_verification_api"  # Optional external validation
      error_message: "Address must include valid street, city, state, and ZIP code"

  temporal_validation:
    date:
      format: "YYYY-MM-DD"  # ISO 8601 date format
      min_date: "2000-01-01"  # UPDATE: Set reasonable minimum date
      max_date: "2030-12-31"  # UPDATE: Set reasonable maximum date
      required: true
      business_days_only: false
      exclude_holidays: false  # Set true if needed for scheduling
      error_message: "Date must be in YYYY-MM-DD format between 2000-01-01 and 2030-12-31"
    
    time:
      format: "HH:MM"  # 24-hour format
      pattern: "^([01][0-9]|2[0-3]):[0-5][0-9]$"
      business_hours_only: false
      # UPDATE: Set your business hours if validation needed
      business_hours:
        start: "06:00"
        end: "20:00"
        days: ["monday", "tuesday", "wednesday", "thursday", "friday"]
      error_message: "Time must be in HH:MM 24-hour format"
    
    datetime:
      format: "YYYY-MM-DD HH:MM"
      timezone_handling: "local"  # or "UTC"
      future_only: false  # Set true for scheduling operations
      past_limit_days: 365  # How far in past to allow
      future_limit_days: 730  # How far in future to allow
      error_message: "Date/time must be valid and within acceptable range"

# CROSS-FIELD VALIDATION RULES
cross_field_validation:
  description: "Validation rules that span multiple fields or entities"
  
  maintenance_scheduling:
    vehicle_availability:
      rule: "Vehicle must not have conflicting reservations during maintenance window"
      validation_query: "Check vehicle reservations for scheduling conflicts"
      error_message: "Vehicle is not available during requested maintenance time"
      
    service_duration:
      rule: "Maintenance end time must be after start time"
      calculation: "end_time > start_time"
      buffer_time: "30 minutes minimum duration"
      error_message: "Maintenance end time must be at least 30 minutes after start time"
      
    technician_capacity:
      rule: "Assigned technician must be available and qualified"
      validation_checks:
        - "Technician not overbooked during time slot"
        - "Technician has required certifications for service type"
        - "Technician is scheduled to work during requested time"
      error_message: "Assigned technician is not available or qualified for this service"
  
  reservation_booking:
    date_time_consistency:
      rule: "End date/time must be after start date/time"
      validation: "end_datetime > start_datetime"
      minimum_duration: "30 minutes"
      maximum_duration: "168 hours"  # 7 days
      error_message: "Reservation end must be after start with reasonable duration"
      
    advance_booking:
      rule: "Reservations must meet minimum advance notice requirements"
      # UPDATE: Customize advance notice periods
      minimum_advance_notice:
        standard_reservation: "2 hours"
        executive_vehicle: "48 hours"
        specialized_vehicle: "72 hours"
        maintenance_conflict: "24 hours"
      error_message: "Reservation does not meet minimum advance notice requirement"
      
    user_authorization:
      rule: "User must be authorized to reserve requested vehicle type"
      authorization_matrix:
        standard_user: ["standard", "compact"]
        department_manager: ["standard", "compact", "suv"]
        executive: ["all_vehicles"]
        visitor: ["visitor_only"]
      error_message: "User not authorized to reserve this vehicle type"
  
  vehicle_assignment:
    driver_qualification:
      rule: "Assigned driver must meet vehicle requirements"
      requirements:
        commercial_vehicle: "Valid CDL license"
        executive_vehicle: "Executive driver authorization" 
        specialized_vehicle: "Specialized training certification"
      error_message: "Driver does not meet qualifications for assigned vehicle type"
      
    geographic_constraints:
      rule: "Vehicle assignment must comply with territorial restrictions"
      validation_checks:
        - "Driver territory matches vehicle assignment area"
        - "Vehicle type appropriate for assigned territory"
        - "Insurance coverage valid for assignment location"
      error_message: "Vehicle assignment violates geographic or territorial constraints"

# BUSINESS LOGIC VALIDATION
business_logic_validation:
  description: "Validation rules enforcing business policies and constraints"
  
  cost_validation:
    maintenance_approval:
      # UPDATE: Set approval thresholds based on your organization
      approval_thresholds:
        auto_approve: 500        # Under $500 auto-approved
        manager_approval: 2500   # $500-$2500 requires manager approval
        director_approval: 10000 # Over $2500 requires director approval
        
      validation_rules:
        - rule: "Maintenance cost must have appropriate approval for amount"
          implementation: "Check approval status against cost threshold"
        - rule: "Emergency maintenance over threshold requires post-approval"
          grace_period: "24 hours"
          
    budget_constraints:
      rule: "Departmental expenses must not exceed allocated budget"
      validation_frequency: "real_time"
      warning_threshold: 0.8   # Warn at 80% of budget
      block_threshold: 1.0     # Block at 100% of budget
      override_authority: "Fleet Director"
  
  scheduling_constraints:
    resource_conflicts:
      rule: "No double-booking of vehicles or service bays"
      validation_scope: "system_wide"
      buffer_time: "15 minutes between appointments"
      error_handling: "Suggest alternative times"
      
    business_hours:
      # UPDATE: Set your actual business hours
      standard_hours:
        weekdays: "06:00-20:00"
        saturday: "08:00-17:00"
        sunday: "closed"
        holidays: "emergency_only"
      
      exceptions:
        emergency_operations: "24/7"
        executive_requests: "extended_hours"
        special_events: "manager_approval_required"
  
  safety_validation:
    vehicle_condition:
      rule: "Vehicles with safety issues cannot be assigned or reserved"
      safety_flags:
        - "brake_system_failure"
        - "steering_malfunction"
        - "tire_condition_unsafe"
        - "lights_inoperative"
        - "inspection_overdue"
      error_message: "Vehicle has safety concerns and cannot be used until repaired"
      
    driver_qualification:
      rule: "Drivers with expired licenses or safety violations restricted"
      disqualifying_conditions:
        - "license_expired_over_grace_period"
        - "recent_dui_conviction"
        - "multiple_safety_violations"
        - "medical_restriction_violated"
      error_message: "Driver does not meet current safety requirements"

# PERFORMANCE VALIDATION RULES
performance_validation:
  description: "Validation rules optimized for system performance"
  
  batch_validation:
    bulk_operations:
      max_batch_size: 500
      validation_order: "fail_fast"  # Stop on first validation error
      parallel_processing: true
      timeout: "30 seconds"
      
    data_import:
      file_size_limit: "50 MB"
      record_limit: 10000
      validation_sampling: true  # Validate sample then full dataset
      error_threshold: 0.05      # Fail if >5% of records have errors
  
  caching_strategy:
    reference_data:
      cache_duration: "1 hour"
      cache_refresh: "background"
      cached_entities: ["facility_list", "user_roles", "vehicle_types"]
      
    validation_results:
      cache_positive_results: "15 minutes"
      cache_negative_results: "5 minutes"
      invalidate_on_data_change: true

# ERROR HANDLING AND USER FEEDBACK
error_handling:
  description: "Standardized error handling and user communication"
  
  error_categories:
    validation_error:
      severity: "medium"
      user_action: "correct_input"
      retry_allowed: true
      error_code_prefix: "VAL"
      
    business_rule_violation:
      severity: "high" 
      user_action: "request_approval_or_exception"
      retry_allowed: false
      error_code_prefix: "BRV"
      escalation_required: true
      
    system_constraint:
      severity: "low"
      user_action: "try_alternative_or_wait"
      retry_allowed: true
      error_code_prefix: "SYS"
      
    data_integrity:
      severity: "critical"
      user_action: "contact_administrator"
      retry_allowed: false
      error_code_prefix: "DIT"
      immediate_escalation: true
  
  user_feedback:
    error_message_format:
      structure: "[Error Code] [Field]: [Description] - [Suggested Action]"
      examples:
        - "VAL001 Vehicle ID: Format must be 3 letters + 3-4 numbers (e.g., VEH001)"
        - "BRV002 Maintenance Cost: $3000 exceeds approval limit - Manager approval required"
        - "SYS003 Service Bay: All bays occupied - Try scheduling for later time"
    
    progressive_disclosure:
      level_1: "Simple error message for common issues"
      level_2: "Detailed explanation with examples"
      level_3: "Technical details for administrators"
      context_help: "Links to relevant documentation or support"
    
    multilingual_support:
      # UPDATE: Add languages relevant to your organization
      supported_languages: ["en", "es", "fr"]  # English, Spanish, French
      default_language: "en"
      fallback_behavior: "use_default_language"

# VALIDATION TESTING AND MAINTENANCE
validation_maintenance:
  description: "Procedures for testing and maintaining validation rules"
  
  testing_strategy:
    unit_tests: "Each validation rule has corresponding unit tests"
    integration_tests: "Cross-field validations tested with realistic data"
    performance_tests: "Validation performance benchmarks maintained"
    regression_tests: "All validation rules tested after system changes"
    
  rule_updates:
    change_process: "Formal change management for validation rule updates"
    testing_required: "All rule changes must pass test suite"
    rollback_plan: "Ability to quickly rollback problematic rule changes"
    documentation: "All validation rules documented with examples"
    
  monitoring:
    validation_metrics: "Track validation failure rates and performance"
    false_positive_tracking: "Monitor and reduce false positive validations"
    user_feedback_integration: "Use user feedback to improve validation messages"
    periodic_review: "Quarterly review of validation rule effectiveness"

# UPDATE CHECKLIST:
# □ Update data format patterns to match your organization's standards
# □ Modify field validation rules for your database schema and business requirements
# □ Add cross-field validation logic for your specific business processes
# □ Include domain-specific validation rules for your industry requirements
# □ Update error messages and user feedback to match your communication style
# □ Set performance optimization parameters for your system capacity
# □ Add business logic validation for your organizational policies
# □ Include safety and regulatory validation rules for your compliance requirements
# □ Test all validation rules with your actual operational data
# □ Establish maintenance procedures for ongoing validation rule updates