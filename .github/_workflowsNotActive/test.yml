name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        test-type: ['unit', 'integration', 'performance']
        exclude:
          # Skip performance tests on older Python versions to save CI resources
          - python-version: '3.9'
            test-type: 'performance'
          - python-version: '3.10' 
            test-type: 'performance'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pytest
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libffi-dev \
          libssl-dev \
          python3-dev
        # For UI testing (if needed)
        sudo apt-get install -y xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .
        pip install -r requirements-test.txt

    - name: Lint with ruff
      run: |
        ruff check src/ tests/
        ruff format --check src/ tests/

    - name: Type check with mypy
      run: |
        mypy src/combadge --ignore-missing-imports

    - name: Security scan with bandit
      run: |
        bandit -r src/combadge -f json -o bandit-report.json || true
        bandit -r src/combadge --severity-level medium

    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/unit/ \
          --cov=src/combadge \
          --cov-report=xml \
          --cov-report=html \
          --junit-xml=test-results-unit.xml \
          -v

    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        pytest tests/integration/ \
          --cov=src/combadge \
          --cov-report=xml \
          --cov-report=html \
          --junit-xml=test-results-integration.xml \
          -v

    - name: Run performance tests
      if: matrix.test-type == 'performance'
      run: |
        pytest tests/performance/ \
          --junit-xml=test-results-performance.xml \
          -v \
          --tb=short
      env:
        # Performance tests may need more resources
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
        path: |
          test-results-*.xml
          htmlcov/
          coverage.xml
          bandit-report.json
        retention-days: 30

    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  quality-gate:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
    - name: Check test results
      run: |
        echo "All test jobs completed"
        # Add logic to fail if critical tests failed

  # Nightly comprehensive test run
  nightly:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-test.txt
    
    - name: Run comprehensive test suite
      run: |
        pytest \
          --cov=src/combadge \
          --cov-report=html \
          --cov-report=xml \
          --junit-xml=nightly-test-results.xml \
          --durations=20 \
          --maxfail=10 \
          -v
    
    - name: Upload nightly results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: nightly-test-results
        path: |
          nightly-test-results.xml
          htmlcov/
          coverage.xml
        retention-days: 7

  # Load testing job (only on main branch)
  load-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-test.txt
    
    - name: Run load tests
      run: |
        pytest tests/performance/test_load_testing.py \
          -m "not slow" \
          --junit-xml=load-test-results.xml \
          -v
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-results
        path: load-test-results.xml
        retention-days: 30

  # Security testing
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install safety bandit semgrep
    
    - name: Run safety check
      run: safety check --json --output safety-report.json || true
    
    - name: Run bandit security scan
      run: bandit -r src/combadge -f json -o bandit-security-report.json || true
    
    - name: Run semgrep
      run: |
        python -m semgrep --config=auto src/ --json --output=semgrep-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-security-report.json
          semgrep-report.json
        retention-days: 30