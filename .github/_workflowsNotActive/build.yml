name: Build and Test ComBadge

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  OLLAMA_VERSION: '0.1.17'

jobs:
  # Code Quality and Testing
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements-test.txt

      - name: Lint with ruff
        run: |
          ruff check src/ tests/ --output-format=github
          ruff format --check src/ tests/

      - name: Type check with mypy
        run: |
          mypy src/combadge --ignore-missing-imports
        continue-on-error: true

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=src/combadge --cov-report=xml --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep

      - name: Run safety check for vulnerabilities
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run bandit security linter
        run: |
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Run semgrep security analysis
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.json
          retention-days: 30

  # Windows Build and Test
  windows-build:
    runs-on: windows-latest
    needs: [quality-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements-test.txt
          pip install pyinstaller

      - name: Install Ollama (Windows)
        run: |
          $OllamaUrl = "https://github.com/ollama/ollama/releases/download/v${{ env.OLLAMA_VERSION }}/ollama-windows-amd64.zip"
          Invoke-WebRequest -Uri $OllamaUrl -OutFile "ollama.zip"
          Expand-Archive -Path "ollama.zip" -DestinationPath "ollama"
          echo "${{ github.workspace }}\ollama" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Start Ollama server
        run: |
          Start-Process -FilePath "ollama.exe" -ArgumentList "serve" -NoNewWindow -PassThru
          Start-Sleep -Seconds 10
        continue-on-error: true

      - name: Run system requirements check
        run: |
          python scripts/deployment/system_requirements.py --output system-requirements.json
        continue-on-error: true

      - name: Run Windows-specific tests
        run: |
          pytest tests/unit/ tests/integration/ -v -k "not slow" --maxfail=5

      - name: Build executable
        run: |
          python scripts/build/build_executable.py --clean

      - name: Validate build
        run: |
          python scripts/deployment/validate_installation.py --path dist --output validation-report.json
        continue-on-error: true

      - name: Create installer
        run: |
          python scripts/build/package_installer.py --type portable
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-build-${{ github.sha }}
          path: |
            dist/
            system-requirements.json
            validation-report.json
          retention-days: 30

      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer-${{ github.sha }}
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 90
        if: success()

  # macOS Build (Limited)
  macos-build:
    runs-on: macos-latest
    needs: [quality-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements-test.txt

      - name: Install Ollama (macOS)
        run: |
          curl -fsSL https://ollama.ai/install.sh | sh
          ollama serve &
          sleep 10
        continue-on-error: true

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v -k "not windows_specific"

      - name: Check system requirements
        run: |
          python scripts/deployment/system_requirements.py
        continue-on-error: true

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [quality-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements-test.txt

      - name: Install Ollama (Linux)
        run: |
          curl -fsSL https://ollama.ai/install.sh | sh
          ollama serve &
          sleep 10
          ollama pull qwen2.5:7b  # Smaller model for CI
        continue-on-error: true

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark-results.json
        continue-on-error: true

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results-${{ github.sha }}
          path: benchmark-results.json
          retention-days: 30

  # Documentation Build
  docs-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

      - name: Build documentation
        run: |
          mkdocs build --clean --strict
        continue-on-error: true

      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  # Dependency Analysis
  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit pipdeptree

      - name: Generate dependency tree
        run: |
          pip install -r requirements/base.txt
          pipdeptree --json-tree --warn silence > dependency-tree.json

      - name: Audit dependencies
        run: |
          pip-audit --format=json --output=audit-results.json
        continue-on-error: true

      - name: Upload dependency reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-reports-${{ github.sha }}
          path: |
            dependency-tree.json
            audit-results.json
          retention-days: 30

  # Build Status Summary
  build-summary:
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, windows-build, macos-build, performance-test, docs-build, dependency-check]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Check | ${{ needs.quality-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows Build | ${{ needs.windows-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS Build | ${{ needs.macos-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Test | ${{ needs.performance-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.docs-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Build failed! Check the failed jobs above." >> $GITHUB_STEP_SUMMARY

      - name: Notify on success
        if: success()
        run: |
          echo "✅ All builds completed successfully!" >> $GITHUB_STEP_SUMMARY